/*
 * This source file was generated by the Gradle 'init' task
 */
package hm222yj.quicksort;

import java.util.Random;
import hm222yj.quicksort.quicksort.Quicksort;
import hm222yj.quicksort.filemanager.FileManager;
import hm222yj.quicksort.mathlogtest.MathLogTest;

public class App {
    public static void main(String[] args) {
        // DATA SETTINGS
        int dataSize = 10_000_000;
        int maxValue = 10_000_000;
        int minValue = 0;
        // int depthSwitch = (int) (2 * Math.floor(Math.log(dataSize) / Math.log(2)));
        int depthSwitch = 0;

        App app = new App();
        Quicksort quicksort = new Quicksort();
        FileManager fileManager = new FileManager();
        MathLogTest mathlogtest = new MathLogTest();

        String csvPathQuickSortHeapSort2 = "build/quicksortheapsortresults2.csv";
        String onlyHeapSort = "build/onlyheapsort.csv";
        try {
            boolean check = fileManager.createFileIfFileIsMissing(csvPathQuickSortHeapSort2);
            if (check) {
                fileManager.writeCSVheaders(csvPathQuickSortHeapSort2,
                        "Array size, Depth switch, Seconds");
            }
            check = fileManager.createFileIfFileIsMissing(onlyHeapSort);
            if (check) {
                fileManager.writeCSVheaders(onlyHeapSort,
                        "Array size, Seconds");
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        int[] arrayToSort = app.randomArray(dataSize, minValue, maxValue);

        // int printMathTest = mathlogtest.testMathLog(8); // Borde f√• tillbaka 3 (2*2*2 = 8)
        // System.out.println(printMathTest);

        // for (int number : arrayToSort) {
        // System.out.println(number);
        // }

        // -------------------Sort Array ---------------------------------
        System.out.println("-----------------------------SORTING-------------------------------");

        // QS
        long startQSnodepthlimit = System.nanoTime();
        quicksort.sortArray(arrayToSort, minValue, maxValue - 1, depthSwitch);
        long endQSnodepthlimit = System.nanoTime();
        long runtimeQSnodepthlimit = endQSnodepthlimit - startQSnodepthlimit;
        double runtimeInSeconds = runtimeQSnodepthlimit / 1_000_000_000.0;
        System.out.println(runtimeInSeconds);

        try {
        fileManager.writeToFile(csvPathQuickSortHeapSort2, maxValue, depthSwitch,
        runtimeInSeconds);
        fileManager.sortCSVfile(csvPathQuickSortHeapSort2);
        } catch (Exception e) {
        System.out.println(e);
        }

        // HS
        // long startHeapsort = System.nanoTime();
        // quicksort.heapSort(arrayToSort);
        // long endHeapsort = System.nanoTime();
        // long runtimeHeapsort = endHeapsort - startHeapsort;
        // double runtimeInSecondsHeapsort = runtimeHeapsort / 1_000_000_000.0;
        // System.out.println(runtimeInSecondsHeapsort);

        // try {
        // fileManager.writeToFile(onlyHeapSort, maxValue,
        // runtimeInSecondsHeapsort);
        // // fileManager.sortCSVfile(onlyHeapSort);
        // } catch (Exception e) {
        // System.out.println(e);
        // }

        // for (int number : arrayToSort) {
        // System.out.println(number);
        // }
    }

    // ------------------Helper methods------------------
    // Random array generator
    private int[] randomArray(int dataSize, int minValue, int maxValue) {
        Random randomNumber = new Random();
        int[] arrayData = new int[dataSize];
        for (int i = 0; i < dataSize; i++) {
            arrayData[i] = randomNumber.nextInt(maxValue - minValue + 1) + minValue;
        }
        return arrayData;
    }
}
